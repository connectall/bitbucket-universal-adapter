[{"schemeId":19,"schemeName":"Default","adapterType":"bitbucket","group":null,"active":true,"adapterMetadataList":[],"requestHeaders":[],"restTemplates":{"QUERY_RECORD_BY_ID":{"templateId":48,"operation":"QUERY_RECORD_BY_ID","httpVerb":"GET","restUrl":"/rest/api/1.0/projects/${workspace}/repos/${repository}/${issuetype}/${recordId}","specifications":{"Request":{"specId":94,"type":"Request","adapterType":null,"specType":null,"status":"Active","specification":null,"samplePayload":null,"statusCode":2,"contentAvailable":false},"Response":{"specId":93,"type":"Response","adapterType":null,"specType":"Groovy","status":"Active","specification":"class CAResponseResult {\n  String id;\n  Map fields;\n}\n\ndef jsonS = new groovy.json.JsonSlurper()\ndef card = jsonS.parseText(payload) as Map\n\n  def _record = new CAResponseResult();\n  _record.id = card.id;\n  def _fields = new HashMap();\n  \n  // Copy fields\n  for(Map.Entry<String,Object> cardField:card.entrySet()) {\n    if(cardField.key.equals(\"fromRef\") || cardField.key.equals(\"toRef\")){\n     _fields.put(cardField.key,cardField.value.latestCommit) \n     _fields.put(\"repository\",cardField.value.repository.name) \n    } else if(cardField.key.equals(\"title\")) {\n        def result = (cardField.value =~ /([A-Z])+(-)([0-9])\\w+/)\n         if(result){   \n            _fields.put('jira-key',result[0][0])\n          }\n       _fields.put(cardField.key,cardField.value)\n    }else if(cardField.key.equals(\"author\")) {\n      _fields.put(cardField.key,cardField.value.user.slug)\n    }else if(cardField.value instanceof String) {\n      _fields.put(cardField.key,cardField.value)\n    } else if(cardField.value instanceof Long) {\n      _fields.put(cardField.key,cardField.value)\n  }\n  }\n\n  // Copy custom fields\n  for(def cfield:card.customFieldItems) {\n    if(cfield.idValue!=null) {\n      _fields.put(cfield.idCustomField,cfield.idValue)\n    } else if(cfield.value != null && cfield.value instanceof Map) {\n      if(cfield.value.containsKey(\"text\"))\n        _fields.put(cfield.idCustomField,cfield.value.text)\n      else if(cfield.value.containsKey(\"number\"))\n        _fields.put(cfield.idCustomField,cfield.value.number)\n      else if(cfield.value.containsKey(\"date\"))\n        _fields.put(cfield.idCustomField,cfield.value.date)\n      else if(cfield.value.containsKey(\"checked\"))\n        _fields.put(cfield.idCustomField,cfield.value.checked)\n      }\n    }\n  _record.fields = _fields;\n \n\n\n\ngroovy.json.JsonOutput.toJson(_record)","samplePayload":"{\n  \"id\": 173,\n  \"version\": 1,\n  \"title\": \"Bugfix/CA-8677 fix ux of valuestream vs list view 2.12.0\",\n  \"description\": \"* CA-8677 - Ignore it\\r\\n* CA-8677 - Removed the blank line\\r\\n* CA-8677 - Added empty lines - Ignore it\\r\\n* CA-8677 - Ignore it\\r\\n* CA-8677 - Ignore it\\r\\n* CA-8677 - Ignore it\\r\\n* CA-8677 - Ignore it\\r\\n* CA-8677 - ignore it\\r\\n* CA-8677 - Ignore it\\r\\n* CA-8677 - Ignore it\",\n  \"state\": \"DECLINED\",\n  \"open\": false,\n  \"closed\": true,\n  \"createdDate\": 1679500083464,\n  \"updatedDate\": 1679500322863,\n  \"closedDate\": 1679500322863,\n  \"fromRef\": {\n    \"id\": \"refs/heads/bugfix/CA-8677-fix-ux-of-valuestream-vs-list-view-2.12.0\",\n    \"displayId\": \"bugfix/CA-8677-fix-ux-of-valuestream-vs-list-view-2.12.0\",\n    \"latestCommit\": \"6b40a8edf2d0cee6e29b1532dc3e0bea11eb1ea3\",\n    \"type\": \"BRANCH\",\n    \"repository\": {\n      \"slug\": \"adaptermodel\",\n      \"id\": 532,\n      \"name\": \"AdapterModel\",\n      \"hierarchyId\": \"dc5aefc889765cb339d8\",\n      \"scmId\": \"git\",\n      \"state\": \"AVAILABLE\",\n      \"statusMessage\": \"Available\",\n      \"forkable\": true,\n      \"project\": {\n        \"key\": \"CA\",\n        \"id\": 126,\n        \"name\": \"Connect All\",\n        \"description\": \"Go2Group's Connect All\",\n        \"public\": false,\n        \"type\": \"NORMAL\",\n        \"links\": {\n          \"self\": [\n            {\n              \"href\": \"https://stash.connectall.com/projects/CA\"\n            }\n          ]\n        }\n      },\n      \"public\": false,\n      \"links\": {\n        \"clone\": [\n          {\n            \"href\": \"https://stash.connectall.com/scm/ca/adaptermodel.git\",\n            \"name\": \"http\"\n          },\n          {\n            \"href\": \"ssh://git@stash.connectall.com:7999/ca/adaptermodel.git\",\n            \"name\": \"ssh\"\n          }\n        ],\n        \"self\": [\n          {\n            \"href\": \"https://stash.connectall.com/projects/CA/repos/adaptermodel/browse\"\n          }\n        ]\n      }\n    }\n  },\n  \"toRef\": {\n    \"id\": \"refs/heads/master\",\n    \"displayId\": \"master\",\n    \"latestCommit\": \"0aa55c4ea2e85560c4dd327e5cb7580345ba98f2\",\n    \"type\": \"BRANCH\",\n    \"repository\": {\n      \"slug\": \"adaptermodel\",\n      \"id\": 532,\n      \"name\": \"AdapterModel\",\n      \"hierarchyId\": \"dc5aefc889765cb339d8\",\n      \"scmId\": \"git\",\n      \"state\": \"AVAILABLE\",\n      \"statusMessage\": \"Available\",\n      \"forkable\": true,\n      \"project\": {\n        \"key\": \"CA\",\n        \"id\": 126,\n        \"name\": \"Connect All\",\n        \"description\": \"Go2Group's Connect All\",\n        \"public\": false,\n        \"type\": \"NORMAL\",\n        \"links\": {\n          \"self\": [\n            {\n              \"href\": \"https://stash.connectall.com/projects/CA\"\n            }\n          ]\n        }\n      },\n      \"public\": false,\n      \"links\": {\n        \"clone\": [\n          {\n            \"href\": \"https://stash.connectall.com/scm/ca/adaptermodel.git\",\n            \"name\": \"http\"\n          },\n          {\n            \"href\": \"ssh://git@stash.connectall.com:7999/ca/adaptermodel.git\",\n            \"name\": \"ssh\"\n          }\n        ],\n        \"self\": [\n          {\n            \"href\": \"https://stash.connectall.com/projects/CA/repos/adaptermodel/browse\"\n          }\n        ]\n      }\n    }\n  },\n  \"locked\": false,\n  \"author\": {\n    \"user\": {\n      \"name\": \"ajawed\",\n      \"emailAddress\": \"ajawed@connectall.com\",\n      \"id\": 1405,\n      \"displayName\": \"Aquib Jawed\",\n      \"active\": true,\n      \"slug\": \"ajawed\",\n      \"type\": \"NORMAL\",\n      \"links\": {\n        \"self\": [\n          {\n            \"href\": \"https://stash.connectall.com/users/ajawed\"\n          }\n        ]\n      }\n    },\n    \"role\": \"AUTHOR\",\n    \"approved\": false,\n    \"status\": \"UNAPPROVED\"\n  },\n  \"reviewers\": [],\n  \"participants\": [],\n  \"links\": {\n    \"self\": [\n      {\n        \"href\": \"https://stash.connectall.com/projects/CA/repos/adaptermodel/pull-requests/173\"\n      }\n    ]\n  }\n}","statusCode":2,"contentAvailable":true}}},"CREATE_RECORD":{"templateId":50,"operation":"CREATE_RECORD","httpVerb":"PUT","restUrl":"/rest/api/1.0/projects/${workspace}/repos/${repository}/${issuetype}","specifications":{"Request":{"specId":96,"type":"Request","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true},"Response":{"specId":95,"type":"Response","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true}}},"UPDATE_RECORD":{"templateId":49,"operation":"UPDATE_RECORD","httpVerb":"POST","restUrl":"/rest/api/1.0/projects/${workspace}/repos/${repository}/${issuetype}/${recordId}","specifications":{"Request":{"specId":98,"type":"Request","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true},"Response":{"specId":97,"type":"Response","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true}}}},"default":true},{"schemeId":20,"schemeName":"commits","adapterType":"bitbucket","group":null,"active":true,"adapterMetadataList":[{"metadataId":67,"metadataKey":"issuetype","metadataValue":"commits"}],"requestHeaders":[],"restTemplates":{"QUERY_RECORD_BY_ID":{"templateId":51,"operation":"QUERY_RECORD_BY_ID","httpVerb":"GET","restUrl":"/rest/api/1.0/projects/${workspace}/repos/${repository}/${issuetype}/${recordId}","specifications":{"Request":{"specId":100,"type":"Request","adapterType":null,"specType":null,"status":"Active","specification":null,"samplePayload":null,"statusCode":2,"contentAvailable":false},"Response":{"specId":99,"type":"Response","adapterType":null,"specType":"Groovy","status":"Active","specification":"class CAResponseResult {\n  String id;\n  Map fields;\n}\n\ndef jsonS = new groovy.json.JsonSlurper()\ndef card = jsonS.parseText(payload) as Map\n\n  def _record = new CAResponseResult();\n  _record.id = card.id;\n  def _fields = new HashMap();\n  \n  // Copy fields\n  for(Map.Entry<String,Object> cardField:card.entrySet()) {\n   if(cardField.key.equals(\"committer\") || cardField.key.equals(\"toRef\")){\n    _fields.put(cardField.key,cardField.value.name) \n    }else if(cardField.key.equals(\"properties\")){\n                def jiraMap = cardField.value as Map\n               for(Map.Entry<String,Object> jiraField:jiraMap.entrySet()) {\n                 _fields.put(jiraField.key,jiraField.value.join(\", \")) \n               } \n        } else if(cardField.value instanceof String) {\n      _fields.put(cardField.key,cardField.value)\n    }else if(cardField.value instanceof Long) {\n      _fields.put(cardField.key,cardField.value)\n  }\n  }\n\n  // Copy custom fields\n  for(def cfield:card.customFieldItems) {\n    if(cfield.idValue!=null) {\n      _fields.put(cfield.idCustomField,cfield.idValue)\n    } else if(cfield.value != null && cfield.value instanceof Map) {\n      if(cfield.value.containsKey(\"text\"))\n        _fields.put(cfield.idCustomField,cfield.value.text)\n      else if(cfield.value.containsKey(\"number\"))\n        _fields.put(cfield.idCustomField,cfield.value.number)\n      else if(cfield.value.containsKey(\"date\"))\n        _fields.put(cfield.idCustomField,cfield.value.date)\n      else if(cfield.value.containsKey(\"checked\"))\n        _fields.put(cfield.idCustomField,cfield.value.checked)\n      }\n    }\n  _record.fields = _fields;\n \n\n\n\ngroovy.json.JsonOutput.toJson(_record)","samplePayload":"{\n  \"id\": \"06fc3e848f54a48991cf7e8548be18e9a6bfb0a3\",\n  \"displayId\": \"06fc3e848f5\",\n  \"author\": {\n    \"name\": \"tjbeam\",\n    \"emailAddress\": \"70118799+tjbeam@users.noreply.github.com\"\n  },\n  \"authorTimestamp\": 1678582925000,\n  \"committer\": {\n    \"name\": \"tjbeam\",\n    \"emailAddress\": \"70118799+tjbeam@users.noreply.github.com\"\n  },\n  \"committerTimestamp\": 1678582925000,\n  \"message\": \"CA-8400 consolidated multiple confirmation windows into one window with radio buttons to remove relationship(s) from dashboard/database\",\n  \"parents\": [\n    {\n      \"id\": \"da6ba10d039106c1b9962a35b1db41e951fa1d6a\",\n      \"displayId\": \"da6ba10d039\",\n      \"author\": {\n        \"name\": \"Sharath Bhaskara\",\n        \"emailAddress\": \"sbhaskara@connectall.com\"\n      },\n      \"authorTimestamp\": 1678176832000,\n      \"committer\": {\n        \"name\": \"Muralidharan Natarajan\",\n        \"emailAddress\": \"mnatarajan@connectall.com\"\n      },\n      \"committerTimestamp\": 1678176832000,\n      \"message\": \"Pull request #1662: CA-8685 fix for artifact type label rendering in listview\\n\\nMerge in CA/connectall-ui from bugfix/CA-8685-logic-gates-automation-list-view-displays-empty-artifacts to master\\n\\n* commit '15d0a582547abe57160d5f0db2d337542e543493':\\n  CA-8685 fix for artifact type label rendering in listview\",\n      \"parents\": [\n        {\n          \"id\": \"91ce16542ba9db09faea750b47112bbbece18a13\",\n          \"displayId\": \"91ce16542ba\"\n        },\n        {\n          \"id\": \"15d0a582547abe57160d5f0db2d337542e543493\",\n          \"displayId\": \"15d0a582547\"\n        }\n      ]\n    }\n  ],\n  \"properties\": {\n    \"jira-key\": [\n      \"CA-8400\"\n    ]\n  }\n}","statusCode":2,"contentAvailable":true}}},"CREATE_RECORD":{"templateId":53,"operation":"CREATE_RECORD","httpVerb":"PUT","restUrl":"/rest/api/1.0/projects/${workspace}/repos/${repository}/${issuetype}/${recordId}","specifications":{"Request":{"specId":102,"type":"Request","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true},"Response":{"specId":101,"type":"Response","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true}}},"UPDATE_RECORD":{"templateId":52,"operation":"UPDATE_RECORD","httpVerb":"POST","restUrl":"/rest/api/1.0/projects/${workspace}/repos/${repository}/${issuetype}/${recordId}","specifications":{"Request":{"specId":106,"type":"Request","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true},"Response":{"specId":105,"type":"Response","adapterType":null,"specType":"None","status":"Active","specification":"{}","samplePayload":"{id:1}","statusCode":2,"contentAvailable":true}}}},"default":false}]